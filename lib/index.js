// Generated by CoffeeScript 1.9.1
var EventEmitter, Promise, Waffel, _, async, cheerio, colors, fs, glob, i18n, markdown, marked, matter, md5, moment, nunjucks, path, pushserve, util, yaml,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

colors = require('colors');

Promise = require('bluebird');

path = require('path');

md5 = require('MD5');

EventEmitter = require('events').EventEmitter;

util = require('util');

async = require('async');

yaml = require('js-yaml');

matter = require('gray-matter');

i18n = require('i18next');

moment = require('moment');

nunjucks = require('nunjucks');

markdown = require('nunjucks-markdown');

marked = require('marked');

cheerio = require('cheerio');

pushserve = require('pushserve');

fs = Promise.promisifyAll(require('fs-extra'));

glob = Promise.promisifyAll(require('globby'));

module.exports = Waffel = (function(superClass) {
  extend(Waffel, superClass);

  Waffel.prototype.defaults = {
    verbose: false,
    defaultPagination: 10,
    defaultSortField: 'slug',
    defaultSortOrder: 'desc',
    structureFile: 'site.yml',
    viewFolder: 'views',
    dataFolder: 'data',
    destinationFolder: 'public',
    staticFolder: 'assets',
    localesFolder: 'locales',
    domain: '',
    basePath: '',
    assetPath: '',
    root: process.cwd(),
    ext: '.md',
    templateExt: '.html',
    languages: [],
    defaultLanguage: 'en',
    fallbackLanguage: 'en',
    localiseDefault: false,
    sitemap: true,
    uglyUrls: false,
    outputExt: '.html',
    displayExt: true,
    dateFormat: 'YYYY-MM-DD',
    markdownOptions: {},
    helpers: {},
    filters: {},
    server: false,
    frontmatter: {
      delims: ['---', '---']
    },
    serverConfig: {
      port: 1999,
      path: 'public',
      indexPath: 'public/404.html'
    }
  };

  Waffel.prototype.helpers = {
    url: function(name, data, options) {
      var page, relativeUrl;
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      page = this._getPageByName(name);
      if (options.page) {
        page.pagination = {
          page: options.page
        };
      }
      if (this.options.uglyUrls) {
        relativeUrl = this._url(page, data, options);
        if (this.options.displayExt) {
          return ([this.options.domain, this.options.basePath, relativeUrl || 'index'].join('/')) + this.options.outputExt;
        } else {
          return [this.options.domain, this.options.basePath, relativeUrl].join('/');
        }
      } else {
        return _.compact([this.options.domain, this.options.basePath, this._url(page, data, options), 'index.html']).join('/');
      }
    },
    asset: function(_path) {
      if (_path == null) {
        _path = '';
      }
      return _.compact([this.options.domain, this.options.basePath, this.options.assetPath, _path]).join('/');
    },
    absoluteURL: function(url) {
      return _.compact([this.options.domain, this.options.basePath, url]).join('/');
    },
    t: function(key, page) {
      return i18n.translate(key, {
        lng: page.language
      });
    },
    loc: function(data, language) {
      if (data == null) {
        data = {};
      }
      if (language == null) {
        language = this.options.defaultLanguage;
      }
      if (_.isArray(data)) {
        return data.map((function(_this) {
          return function(item) {
            if (item._localised) {
              return item[language] || item[_this.options.fallbackLanguage];
            } else {
              return item;
            }
          };
        })(this));
      } else if (!data._localised) {
        return data;
      } else {
        return data[language] || data[this.options.fallbackLanguage];
      }
    }
  };

  Waffel.prototype.filters = {
    toArray: function(object) {
      return _.toArray(object);
    },
    pluck: function(object, key) {
      if (object == null) {
        object = {};
      }
      return _.pluck(object, key);
    },
    flatten: function(array) {
      if (array == null) {
        array = [];
      }
      return _.flatten(array);
    },
    uniq: function(array) {
      if (array == null) {
        array = [];
      }
      return _.uniq(array);
    },
    where: function(array, search) {
      if (array == null) {
        array = [];
      }
      if (search == null) {
        search = {};
      }
      return _.where(array, search);
    },
    findWhere: function(array, search) {
      if (array == null) {
        array = [];
      }
      if (search == null) {
        search = {};
      }
      return _.findWhere(array, search);
    },
    limit: function(array, count) {
      if (array == null) {
        array = [];
      }
      if (count == null) {
        count = 10;
      }
      return array.slice(0, count);
    },
    format: function(date, format) {
      if (format == null) {
        format = this.options.dateFormat;
      }
      return moment(date).format(format);
    },
    excerpt: function(text, size) {
      var $, words;
      if (size == null) {
        size = 200;
      }
      $ = cheerio.load(marked(text));
      text = $('p').filter(function(index, element) {
        return (element.children[0].type === 'text') || _.contains(['em', 'strong'], element.children[0].name);
      }).first().text().trim();
      if (text.length > size) {
        words = text.substring(0, size).split(' ');
        words.pop();
        return (words.join(' ')) + "â€¦";
      } else {
        return text;
      }
    },
    toJSON: function(data) {
      return JSON.stringify(data);
    },
    inspect: function(object) {
      console.log(util.inspect(object, false, 2, true));
      return object;
    },
    top: function(data, thresh) {
      if (thresh == null) {
        thresh = 3;
      }
      data = _.flatten(data);
      data = _.reduce(data, function(memo, x) {
        if (memo[x]) {
          memo[x] = memo[x] + 1;
        } else {
          memo[x] = 1;
        }
        return memo;
      }, {});
      data = _.reduce(data, function(memo, freq, key) {
        memo.push({
          key: key,
          freq: freq
        });
        return memo;
      }, []);
      data = _.sortBy(data, function(bin) {
        return -bin.freq;
      });
      return data.slice(0, thresh).map(function(x) {
        return x.key;
      });
    }
  };

  function Waffel(opts) {
    this.postGenerate = bind(this.postGenerate, this);
    var filter, helper, name, ref, ref1, site;
    this.options = _.extend(this.defaults, opts);
    this.options.dataFolder = path.join(this.options.root, this.options.dataFolder);
    this.options.viewFolder = path.join(this.options.root, this.options.viewFolder);
    this.options.staticFolder = path.join(this.options.root, this.options.staticFolder);
    this.options.localesFolder = path.join(this.options.root, this.options.localesFolder);
    this.options.destinationFolder = path.join(this.options.root, this.options.destinationFolder);
    this.options.structureFile = path.join(this.options.root, this.options.structureFile);
    this.helpers = _.extend(this.helpers, this.options.helpers);
    this.filters = _.extend(this.filters, this.options.filters);
    ref = this.helpers;
    for (name in ref) {
      helper = ref[name];
      this.helpers[name] = _.bind(helper, this);
    }
    ref1 = this.filters;
    for (name in ref1) {
      filter = ref1[name];
      this.filters[name] = _.bind(filter, this);
    }
    this.filters.excerpt = _.memoize(this.filters.excerpt, function(text, size) {
      return (md5(text)) + "." + size;
    });
    this.filters.top = _.memoize(this.filters.top, function(data, size) {
      return (_.flattenDeep(data.join(''))) + "." + size;
    });
    this.data = {};
    site = yaml.safeLoad(fs.readFileSync(this.options.structureFile, 'utf8'));
    this.config = site.config;
    this.structure = site.structure;
    this.registerTemplates();
  }

  Waffel.prototype.registerTemplates = function() {
    var filter, name, ref;
    this.env = nunjucks.configure(this.options.viewFolder, {
      watch: false,
      express: null
    });
    ref = this.filters;
    for (name in ref) {
      filter = ref[name];
      this.env.addFilter(name, filter.bind(this));
    }
    marked.setOptions(this.options.markdownOptions);
    markdown.register(this.env, marked);
    return nunjucks.precompile(this.options.viewFolder, {
      env: this.env
    });
  };

  Waffel.prototype.init = function() {
    var _path;
    _path = path.join(this.options.dataFolder, "**/*" + this.options.ext);
    console.log("--> Globbing " + _path.cyan + ":");
    i18n.init({
      preload: this.options.languages.concat(['dev']),
      lng: this.options.defaultLanguage,
      fallbackLng: 'dev',
      resGetPath: path.join(this.options.localesFolder, '__lng__.json')
    });
    return glob.callAsync(this, _path).then((function(_this) {
      return function(files) {
        files.forEach(_this._parseFile, _this);
        return _this.data;
      };
    })(this));
  };

  Waffel.prototype.generate = function(options) {
    if (options == null) {
      options = {};
    }
    this.start = process.hrtime();
    console.log("--> Start generation process...\n---");
    if (options.data) {
      _.merge(this.data, options.data);
    }
    this.emit('startGeneration');
    return fs.ensureDirAsync(this.options.destinationFolder).then((function(_this) {
      return function() {
        var i, language, languages, len, tasks;
        tasks = [];
        languages = _this.options.localiseDefault ? _this.options.languages : _this.options.languages.filter(function(l) {
          return l !== _this.options.defaultLanguage;
        });
        for (i = 0, len = languages.length; i < len; i++) {
          language = languages[i];
          tasks = tasks.concat(_this._generateForLanguage(language, true));
        }
        tasks = tasks.concat(_this._generateForLanguage(_this.options.defaultLanguage, false));
        return async.parallel(tasks, _this.postGenerate);
      };
    })(this));
  };

  Waffel.prototype.postGenerate = function(err, pages) {
    var elapsed, millis;
    elapsed = process.hrtime(this.start);
    millis = elapsed[1] / 1000000;
    console.log("--> Generated " + (pages.length + '').cyan + " pages in " + elapsed[0] + "." + (millis.toFixed(0)) + "s.");
    if (this.options.sitemap) {
      this._createSitemap(pages);
    }
    this.emit('generation:complete');
    if (this.options.server) {
      return this._launchServer();
    }
  };

  Waffel.prototype._generateForLanguage = function(language, localised) {
    var _name, _page, name, page, ref, ref1, tasks, url;
    tasks = [];
    ref = this.structure;
    for (name in ref) {
      page = ref[name];
      if (page.languages && indexOf.call(page.languages, language) < 0) {
        if (this.options.verbose) {
          console.log("Notice:".magenta + " " + name.green + " won't be rendered in " + language.yellow);
        }
      } else if (page.template) {
        page.name = name;
        url = this._url(page, {}, {
          language: language,
          localised: localised
        });
        tasks.push(this._createPage(page, name, url, {}, language, localised));
      } else if (page.collection) {
        ref1 = page.pages;
        for (_name in ref1) {
          _page = ref1[_name];
          _page.name = name + "." + _name;
          if (_name === 'single') {
            tasks = tasks.concat(_.compact(this._createSinglePages(_page, name + ".single", this.data[page.collection], language, localised)));
          } else {
            tasks = tasks.concat(_.compact(this._createCollectionPage(_page, name + "." + _name, this.data[page.collection], language, localised)));
          }
        }
      }
    }
    return tasks;
  };

  Waffel.prototype._parseFile = function(file) {
    var base, base1, collection, data, language, loadedData, name1, ref, relativePath, tokens;
    relativePath = file.replace(this.options.dataFolder, '');
    tokens = relativePath.split(path.sep).slice(1);
    collection = tokens[0];
    (base = this.data)[collection] || (base[collection] = {});
    loadedData = matter.read(file, {
      delims: this.options.frontmatter.delims
    });
    data = loadedData.data;
    data.__content = loadedData.content;
    data.slug = data.slug || path.basename(relativePath, this.options.ext);
    if (ref = tokens[1], indexOf.call(this.options.languages, ref) >= 0) {
      language = tokens[1];
      (base1 = this.data[collection])[name1 = data.slug] || (base1[name1] = {
        _localised: true
      });
      return this.data[collection][data.slug][language] = data;
    } else {
      return this.data[collection][data.slug] = data;
    }
  };

  Waffel.prototype._getPageByName = function(name) {
    var tokens;
    tokens = name.split('.');
    if (tokens.length === 1) {
      return this.structure[name];
    } else {
      return this.structure[tokens[0]].pages[tokens[1]];
    }
  };

  Waffel.prototype._slugify = function(value) {
    if (value == null) {
      value = '';
    }
    return value.toLowerCase().replace(/\s+/g, '-').replace(/[^-\w]/g, '');
  };

  Waffel.prototype._formatToken = function(value) {
    if (value instanceof Date) {
      value = moment(value).format(this.options.dateFormat);
    }
    return this._slugify(value);
  };

  Waffel.prototype._url = function(page, data, opts) {
    var tokens;
    if (opts == null) {
      opts = {};
    }
    tokens = page.url.split('/');
    if (opts.localised) {
      tokens.unshift(opts.language);
    }
    tokens = tokens.map((function(_this) {
      return function(token) {
        if (token[0] === ':') {
          return _this._formatToken(data.group || data[token.slice(1)]);
        } else {
          return token;
        }
      };
    })(this));
    if (page.pagination && page.pagination.page > 1) {
      tokens.push('page');
      tokens.push(page.pagination.page);
    }
    return _.compact(tokens).join('/');
  };

  Waffel.prototype._target = function(url) {
    var ext;
    ext = path.extname(url);
    if (ext) {
      return path.join(this.options.destinationFolder, url);
    } else if (this.options.uglyUrls && url.length > 0) {
      return path.join(this.options.destinationFolder, "" + url + this.options.outputExt);
    } else {
      return path.join(this.options.destinationFolder, url, 'index.html');
    }
  };

  Waffel.prototype._renderPage = function(page, _data) {
    var tmpData;
    tmpData = {};
    tmpData[page["export"] || 'item'] = _data;
    return nunjucks.render("" + page.template + this.options.templateExt, _.extend(this.helpers, tmpData, {
      options: this.options,
      config: this.config,
      data: this.data,
      page: page
    }));
  };

  Waffel.prototype._createCollectionPage = function(page, name, set, language, localised) {
    var order, sets, sort, tasks;
    sort = page.sort && page.sort.field ? page.sort.field : this.options.defaultSortField;
    order = page.sort && page.sort.order ? page.sort.order : this.options.defaultSortOrder;
    if (page['filter']) {
      set = _.where(set, page['filter']);
    }
    if (page.groupBy) {
      sets = {};
      _(set).pluck(page.groupBy).flatten().unique().sort().value().forEach((function(_this) {
        return function(group) {
          return sets[group] = _.toArray(set).filter(function(x) {
            if (_(x[page.groupBy]).isArray()) {
              return _.contains(x[page.groupBy], group);
            } else {
              return x[page.groupBy] === group;
            }
          });
        };
      })(this));
    } else {
      sets = [set];
    }
    tasks = _.map(sets, (function(_this) {
      return function(set, group) {
        var pages;
        pages = _(set).sortBy(sort).tap(function(x) {
          if (order === 'desc') {
            return _(x.reverse());
          } else {
            return x;
          }
        }).chunk(page.paginate || _this.options.defaultPagination).value();
        return pages.map(function(p, index) {
          var _page, url;
          _page = _.clone(page);
          _page.pagination = {
            page0: index,
            page: index + 1,
            total: pages.length
          };
          _page.group = group;
          url = _this._url(_page, {
            group: group
          }, {
            language: language,
            localised: localised
          });
          return _this._createPage(_page, name, url, p, language, localised);
        });
      };
    })(this));
    return _.flatten(tasks);
  };

  Waffel.prototype._createSinglePages = function(page, name, set, language, localised) {
    return _.map(set, (function(_this) {
      return function(item, slug) {
        var data, url;
        data = item._localised ? item[language] || item[_this.options.fallbackLanguage] : item;
        if (page.filter && !_.where([data], page.filter).length) {
          return false;
        }
        url = _this._url(page, data, {
          language: language,
          localised: localised
        });
        return _this._createPage(page, name, url, data, language, localised);
      };
    })(this));
  };

  Waffel.prototype._createPage = function(page, name, url, data, language, localised) {
    if (data == null) {
      data = {};
    }
    return (function(_this) {
      return function(callback) {
        var _page, languageInfo, output, pageInfo, paginationInfo, target;
        target = _this._target(url);
        _page = _.clone(page);
        _page.path = url;
        _page.language = language;
        _page.localised = localised;
        output = _this._renderPage(_page, data);
        languageInfo = localised ? "[" + language + "] " : '[--] ';
        paginationInfo = page.pagination ? " " + page.pagination.page + "/" + page.pagination.total : '';
        pageInfo = data.slug || data.group || page.group || '';
        pageInfo = pageInfo ? " [" + pageInfo + "]" : '';
        if (_this.options.verbose) {
          console.log(languageInfo.red + "Generating " + name.green + pageInfo.yellow + paginationInfo.magenta + " at: " + target.cyan);
        }
        return fs.outputFile(target, output, function(err) {
          return callback(err, {
            page: _page,
            data: data,
            url: url
          });
        });
      };
    })(this);
  };

  Waffel.prototype._createSitemap = function(pages) {
    var output, target;
    target = path.join(this.options.destinationFolder, 'sitemap.xml');
    output = nunjucks.render('sitemap.xml', _.extend(this.helpers, {
      options: this.options,
      config: this.config,
      data: this.data,
      pages: pages.filter(function(p) {
        return !_.isBoolean(p.page.sitemap && p.page.sitemap === !false);
      }),
      now: new Date
    }));
    return fs.outputFile(target, output, (function(_this) {
      return function(err) {
        return console.log("--> Created " + 'sitemap.xml'.cyan);
      };
    })(this));
  };

  Waffel.prototype._launchServer = function() {
    var opts, server;
    opts = _.extend(this.options.serverConfig, this.options.server);
    return server = pushserve(opts, (function(_this) {
      return function() {
        console.log("--> waffel server waiting for you at " + ("http://localhost:" + opts.port).green);
        return _this.emit('server:start', server);
      };
    })(this));
  };

  return Waffel;

})(EventEmitter);
