// Generated by CoffeeScript 1.10.0
var _, i18n;

_ = require('lodash');

i18n = require('i18next');

module.exports = {
  url: function(name, data, options) {
    var page, relativeUrl;
    if (data == null) {
      data = {};
    }
    if (options == null) {
      options = {};
    }
    _.merge(options, _.last(arguments));
    page = this._getPageByName(name);
    if (options.page) {
      page.pagination = {
        page: options.page
      };
    }
    if (this.options.uglyUrls) {
      relativeUrl = this._url(page, data, options);
      if (this.options.displayExt) {
        return (_.compact([this.options.domain, this.options.basePath, relativeUrl || 'index']).join('/')) + this.options.outputExt;
      } else {
        return _.compact([this.options.domain, this.options.basePath, relativeUrl]).join('/');
      }
    } else {
      return _.compact([this.options.domain, this.options.basePath, this._url(page, data, options), 'index.html']).join('/');
    }
  },
  asset: function(_path) {
    if (_path == null) {
      _path = '';
    }
    return _.compact([this.options.domain, this.options.basePath, this.options.assetPath, _path]).join('/');
  },
  absoluteURL: function(url) {
    return _.compact([this.options.domain, this.options.basePath, url]).join('/');
  },
  t: function(key) {
    var page;
    page = _.last(arguments);
    return i18n.translate(key, {
      lng: page.language
    });
  },
  loc: function(data, language) {
    if (data == null) {
      data = {};
    }
    if (language == null) {
      language = this.options.defaultLanguage;
    }
    if (_.isArray(data)) {
      return data.map((function(_this) {
        return function(item) {
          if (item._localised) {
            return item[language] || item[_this.options.fallbackLanguage];
          } else {
            return item;
          }
        };
      })(this));
    } else if (!data._localised) {
      return data;
    } else {
      return data[language] || data[this.options.fallbackLanguage];
    }
  }
};
